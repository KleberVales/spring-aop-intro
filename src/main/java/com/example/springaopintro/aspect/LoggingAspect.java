package com.example.springaopintro.aspect;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    @Pointcut("execution(* com.example.springaopintro.service.*.*(..))")
    public void serviceMethods() {}

    @Before("serviceMethods()")
    public void beforeAdvice() {
        System.out.println("üîç [BEFORE] Iniciando m√©todo de servi√ßo...");
    }

    @After("serviceMethods()")
    public void afterAdvice() {
        System.out.println("‚úÖ [AFTER] M√©todo de servi√ßo finalizado.");
    }

    @Around("serviceMethods()")
    public Object aroundAdvice(ProceedingJoinPoint pjp) throws Throwable {

        long start = System.currentTimeMillis();
        Object result = pjp.proceed(); // executa o m√©todo original
        long end = System.currentTimeMillis();
        System.out.println("‚è±Ô∏è [AROUND] Tempo de execu√ß√£o: " + (end - start) + "ms");
        return result;

    }
}
